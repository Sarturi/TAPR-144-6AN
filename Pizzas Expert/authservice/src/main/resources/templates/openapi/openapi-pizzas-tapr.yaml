openapi: 3.0.3
info:
  title: Pizzas TAPR API
  description: |
    Documentação Swagger gerada a partir da coleção Bruno enviada (login, refresh,
    logout e CRUD básico de usuários). Endpoints e exemplos foram inferidos dos
    requests da coleção. Ajuste conforme os contratos reais do seu backend.
  version: 1.0.0
servers:
  - url: http://localhost:8080
    description: Ambiente local
tags:
  - name: Auth
    description: Autenticação e sessão
  - name: Users
    description: Gestão de usuários
paths:
  /auth/login/password:
    post:
      tags: [Auth]
      summary: Login com e-mail e senha
      description: Retorna um par de tokens (access e refresh) ao autenticar com credenciais válidas.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginPasswordRequest'
            examples:
              exemplo:
                value:
                  email: teste@gmail.com
                  password: "12345678"
      responses:
        '200':
          description: Autenticado com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPair'
              examples:
                exemplo:
                  value:
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.access.token.aqui
                    refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.refresh.token.aqui
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              examples:
                exemplo:
                  value:
                    message: Email ou senha incorretos
  /auth/refresh:
    post:
      tags: [Auth]
      summary: Renovar access token usando refresh token
      description: |
        Aceita o refresh token no corpo da requisição. Suporta `text/plain` com o token puro
        ou `application/json` com objeto `{ "refreshToken": "<token>" }`.
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Refresh token em texto puro
            examples:
              exemplo:
                value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.refresh.token.aqui
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              exemplo:
                value:
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.refresh.token.aqui
      responses:
        '200':
          description: Novo access token gerado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPair'
        '401':
          description: Refresh token inválido ou expirado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /auth/logout:
    post:
      tags: [Auth]
      summary: Logout (revogar refresh token)
      description: |
        Revoga o refresh token informado. Suporta `text/plain` com o token puro
        ou `application/json` com objeto `{ "refreshToken": "<token>" }`.
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
              description: Refresh token em texto puro
            examples:
              exemplo:
                value: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.refresh.token.aqui
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
            examples:
              exemplo:
                value:
                  refreshToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.refresh.token.aqui
      responses:
        '200':
          description: Logout efetuado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
              examples:
                exemplo:
                  value:
                    message: Refresh token revogado
        '401':
          description: Token inválido
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
  /users:
    get:
      tags: [Users]
      summary: Listar usuários
      responses:
        '200':
          description: Lista de usuários
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                exemplo:
                  value:
                    - id: f6cab...2f47
                      name: Maria
                      email: maria@example.com
                    - id: 2536c...54e3
                      name: João
                      email: joao@example.com
    post:
      tags: [Users]
      summary: Registrar usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
            examples:
              exemplo:
                value:
                  name: Teste
                  email: teste@gmail.com
                  password: "12345678"
      responses:
        '201':
          description: Usuário criado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                exemplo:
                  value:
                    id: 8f2f3c30-1234-4b56-9a7b-0a1b2c3d4e5f
                    name: Teste
                    email: teste@gmail.com
        '400':
          description: Dados inválidos
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageResponse'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        email:
          type: string
          format: email
      required: [id, name, email]
    CreateUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
          minLength: 8
      required: [name, email, password]
    LoginPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
      required: [email, password]
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
      required: [refreshToken]
    TokenPair:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT de acesso (curta duração)
        refreshToken:
          type: string
          description: JWT de atualização (longa duração)
      required: [accessToken, refreshToken]
    MessageResponse:
      type: object
      properties:
        message:
          type: string
security:
  - bearerAuth: []
